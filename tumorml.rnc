# RELAX NG schema for TumorML 1.1
# Author: David Johnson
# Created with oXygen XML editor
#
# Copyright (c) 2012-2013, University of Oxford 
# The TumorML schema is distributed under the terms of the GNU Lesser General Public License (LGPL)
# http://www.gnu.org/licenses/lgpl.html

namespace tumorml = "http://www.tumor-project.eu/tumorml/1.1"

# Regex for alphanumeric combinations w/ underscores OR MIRIAM URIs

ident = xsd:token { pattern = "_*[0-9a-zA-Z][_0-9a-zA-Z]*|(urn:miriam:([\w\-\.]+\.[\w\-\.]+)+:[\w\-\.]+:[\w\-\.]+)" }

# TUMOR repository metadata value types

mathType = 
      string "discrete" 
    | string "continuous" 
    | string "hybrid"
biocomplexityDirectionType = 
      string "topDown" 
    | string "bottomUp" 
    | string "middleOut"
cancerType = 
      string "glioma" 
    | string "glioblastoma"
    | string "nephroblastoma" 
    | string "lung" 
    | string "breast"
materializationType = 
      string "solid" 
    | string "liquid"
homogeneityType = 
      string "homogeneous" 
    | string "non-homogeneous"
imageBasedDetectabilityType = 
      string "imageable" 
    | string "non-imageable"
    
# JSDL types
# n.b. Restricted due to TUMOR repository DB schema restrictions

osType = 
      string "unknown" 
    | string "linux" 
    | string "winNT" 
    | string "macOS" 
    | string "winXP" 
    | string "winVista" 
    | string "win7" 
    | string "solaris" 
    | string "sunOS" 
    | string "javaVM"
cpuType = 
      string "sparc" 
    | string "powerpc" 
    | string "x86" 
    | string "x86_32" 
    | string "x86_64" 
    | string "parisc" 
    | string "mips" 
    | string "ia64" 
    | string "arm" 
    | string "other"
langType = 
      string "c" 
    | string "cpp" 
    | string "java" 
    | string "python" 
    | string "perl" 
    | string "fortran" 
    | string "bash" 
    | string "multiple"
    | string "matlab"
    
commandLineDataTypes = 
      string "int" 
    | string "double" 
    | string "filename" 
    | string "string"
    
# some simple Dublin Core elements
# n.b. Simplified due to TUMOR repository DB schema restrictions

dc_elements = (
    element title { text } 
  & element creator { person }?
  & element description { text }?
  & element publisher { person }?
  & element contributor { person }*
  & element date { xsd:dateTime }
)

# some simple xCard (vCard) elements describing an individual person, including a TUMOR user ID
# n.b. Simplified due to TUMOR repository DB schema restrictions

person = element person {
    attribute id { ident }
  , element fullname { text }?
  , element name {
        element surname { text }
      , element given { text }
      , element prefix { text }*
      , element suffix { text }*
    }?
  , element email { text }*
  , element org { text }*
}

# TUMOR repository specific metadata
# n.b. Based on TUMOR repository DB schema
tumor_elements = (
    element math { mathType | text }?
  & element biocomplexityDirection { biocomplexityDirectionType | text }?
  & element cancer { cancerType | text }?
  & element materialization { materializationType | text }?
  & element homogeneity { homogeneityType | text }?
  & element imageBasedDetectability { imageBasedDetectabilityType | text }?
  & element freeGrowth { xsd:boolean }?
  & element treatmentIncluded { xsd:boolean }?
)

# External references
# n.b. Based on TUMOR repository DB schema

# bibType is based on BibTeX
bibType = string "article"
    | string "book"
    | string "booklet"
    | string "manual"
    | string "techreport"
    | string "mastersthesis"
    | string "phdthesis"
    | string "inbook"
    | string "incollection"
    | string "proceedings"
    | string "inproceedings"
    | string "conference"
    | string "unpublished"
    | string "misc"

reference = element reference { 
    element title { text }
  & element source { text }? 
  & element creator { text }?
  & element citation { text }?
  & element type { bibType | text }
}
  
# SI base units based on NIST Reference
# http://physics.nist.gov/cuu/Units/current.html

siBaseUnitTypes = 
    string "meter"
  | string "kilogram"
  | string "second"
  | string "ampere"
  | string "kelvin"
  | string "mole"
  | string "candela"
  
# Some extra non standard units used in cancer modelling, e.g. arbitrary counts
  
tumorExtraUnitTypes = 
    string "item"
  | string "Gray"
  
# Combined lists of unit types used in TumorML
  
unitTypes = siBaseUnitTypes | tumorExtraUnitTypes
# or derived unit name

# Units model

derivedUnit = element derivedUnit {
    attribute name { text }
  , element unit {
        attribute name { text }
      , attribute multiplier { xsd:int }?
      , attribute offset { xsd:int }?
      , attribute scale { xsd:int }?
      , attribute exp { xsd:int }?
    }+
}

# Each TumorML model has an ID to lookup in the repository

start = tumorml
tumorml_id = attribute id { ident }

# Basic structure is a model ID, header containing metadata, followed by the model description

tumorml = element tumorml {
    tumorml_id
  , header
  , model 
}

# The header contains metadata as: 
# * Dublin Core elements
# * TUMOR repository DB specific elements
# * Bibliographical references (optional)

header = element header { 
    dc_elements
  & tumor_elements
  & reference* 
}

# The model description contains either:
# 1) a simple model as
#     * One or more implementations
#     * A input/output parameters profile
# or
# 2) a complex model as
#     * Multiple submodels
#     * A model instance topology 

model = element model {
    simpleModel
  | complexModel
}
  
simpleModel = (
    parameters
  , implementation+
)

complexModel = (
    submodel
  , submodel+
  , topology
)

# Each implementation contains:
#  * Metadata as Dublin Core and any number of bibliographic references (optional)
#  * A package file name
#  * A command line to initiate model execution
#  * A list of runtime environment requirements

implementation = element implementation { 
    attribute id { ident }
  & dc_elements
  & reference*
  & package
  & command
  & requirements
}

# A package consists of a package name and a list of files

package = element package { 
    attribute name { text }
  & attribute checksum { text }
  & file+
}

# A file has a name, a full path relative to the package root, and a checksum (optional)

fname = xsd:token { pattern = "[A-Za-z0-9\\-\\._]+" } # not tested yet

dpath = xsd:token { pattern = "(/)?([^\\0]+(/)?)+" } # not tested yet

file = element file {
    attribute name { fname } # regex describing valid filenames
  & attribute source { dpath } # regex describing valid paths
  & attribute checksum { text }?
}

# A command is a simple string for now.

command = element command { text } #TODO replace with a suitable regex

# The requirements include:
#  * Operating system (optional)
#  * CPU architecture (optional)
#  * Languages that need to be supported (optional, can be multiple)

requirements = element requirements{
    element operatingSystem{ osType }?
  & element CPUArchitecture{ cpuType }?
  & element language { langType }*
}

# Each submodel has a unique ID and:
#  * All the elements of a simple model
# or
#  * All the elements of a complex model

submodel = element submodel {
    (
        attribute id { ident } 
      , simpleModel
    ) 
  | complexModel
}

# A topology declares a 2 or more instances and at least one coupling of instance parameters together

topology = element topology {
    instance, instance+
  , coupling+
}

# An instance has a unique ID, references a submodel by ID and has a multiplicity (currently fixed)

instance = element instance { 
    attribute id { ident }   
  & attribute submodel { ident }
  & attribute multiplicity { xsd:int }?
}

# A coupling refers to a specific parameter of two different submodels
#  * from submodel.parameter
#  * to submodel.parameter

coupling = element coupling { 
    attribute from { ident } 
  & attribute to { ident }   
}

# The parameters element defines at least on input parameter and multiple output parameters
# n.b. There must be at least one input parameter

parameters = element parameters { 
    element units { derivedUnit+ }* 
  & element in { parameter }+
  & element out { parameter }* 
}

# Parameters consist of:
#  * A unique ID/name
#  * A label (optional)
#  * A description  (optional)
#  * Whether or not this parameter is optional (optional)
#  * A value descriptor (optional)
#      * The descriptor contains a datatype, optional default value, and optional value range
#  * A unit constraint, based on SI prefix and base units (optional)
#  
# regardless of whether they are inputs or outputs

parameter = (
    attribute name { ident }
  & attribute label { text }?
  & attribute optional { xsd:boolean }?
  & element description { text }?  
  & element value {
      attribute type { commandLineDataTypes }
    & attribute \default { text }?
    & element range {
        element min { 
            attribute inclusive { xsd:boolean }?
          & text
        }?
      & element max { 
            attribute inclusive { xsd:boolean }?
          & text
        }?
    }?
    & element unit { 
      # SI unit, or an ID referencing a derived unit
      attribute type { unitTypes | ident }
    }?    
  }
)
